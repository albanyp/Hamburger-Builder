{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Auth/Auth.module.css","containers/Auth/Auth.js"],"names":["Input","props","inputElement","validationError","invalid","touched","inputClasses","classes","InputElement","shouldValidate","push","Invalid","elementType","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Label","label","InputElementContainer","icon","style","color","borderRight","width","fontSize","padding","module","exports","connect","state","loading","auth","error","isAuthenticated","token","buildingBurger","burgerBuilder","building","authRedirect","authRedirectPath","dispatch","onAuth","email","password","isSignedUp","actions","onSetAuthRedirectPath","useState","type","placeholder","validation","required","isEmail","valid","minLength","authForm","setAuthForm","setIsSignedUp","useEffect","formElementsArray","id","config","form","formElement","elementNameFirstLetter","charAt","toUpperCase","nameWithoutLetter","slice","labelName","iconStyle","FormItemContainer","FormLabel","faEnvelope","faKey","FormInput","event","controlName","updatedControls","updateObject","target","checkValidity","inputChangeHandler","errorMessage","message","to","AuthContainer","Auth","FormUserIcon","faUserCircle","FormTitle","FormContainer","onSubmit","preventDefault","submitHandler","FormButton","btnType","clicked"],"mappings":"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","file":"static/js/4.dea6de41.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nimport classes from \"./Input.module.css\";\r\n\r\nconst Input = (props) => {\r\n  let inputElement = null;\r\n  let validationError = null;\r\n\r\n  if(props.invalid && props.touched){\r\n    validationError = <p><strong>Please enter a valid value</strong></p>\r\n  }\r\n\r\n  const inputClasses = [classes.InputElement];\r\n\r\n  if(props.invalid && props.shouldValidate && props.touched){\r\n    inputClasses.push(classes.Invalid);\r\n  }\r\n\r\n  switch (props.elementType) {\r\n    case \"input\":\r\n      inputElement = <input className={inputClasses.join(\" \")} {...props.elementConfig} value={props.value} onChange={props.changed}/>;\r\n      break;\r\n    case \"textarea\":\r\n      inputElement = <textarea className={inputClasses.join(\" \")} {...props.elementConfig} value={props.value} onChange={props.changed}/>;\r\n      break;\r\n    case \"select\":\r\n      inputElement = (\r\n        <select\r\n        className={classes.InputElement} \r\n        value={props.value} onChange={props.changed}>\r\n         {props.elementConfig.options.map(option => (\r\n            <option key={option.value} value={option.value}> \r\n              {option.displayValue} \r\n            </option>\r\n          ))}\r\n        </select>\r\n        )\r\n      break;\r\n    default:\r\n      inputElement = <input className={inputClasses.join(\" \")} {...props.elementConfig} value={props.value}/>;\r\n  }\r\n\r\n  const iconStyle = {   \r\n    color:\"#f2a30f\",\r\n    borderRight: \"1px solid #f2f2f2\",\r\n    width: \"30px\",\r\n    fontSize: \"20px\",\r\n    padding: \"8px\",\r\n  }\r\n\r\n  return (\r\n    <div className={classes.Input}>\r\n      <label className={classes.Label}>{props.label}</label>\r\n      <div className={classes.InputElementContainer}>\r\n        {props.icon ? \r\n          <FontAwesomeIcon icon={props.icon} style={iconStyle}/>\r\n          : null\r\n        }\r\n        {inputElement}\r\n      </div>\r\n      {validationError}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1Jw2q\",\"Label\":\"Input_Label__bH7-f\",\"InputElementContainer\":\"Input_InputElementContainer__2N5hB\",\"InputElement\":\"Input_InputElement__1ZTnU\",\"Invalid\":\"Input_Invalid__2vryH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AuthContainer\":\"Auth_AuthContainer__hw0ue\",\"Auth\":\"Auth_Auth__9Xb01\",\"FormContainer\":\"Auth_FormContainer__InkS9\",\"FormTitle\":\"Auth_FormTitle__3QYn8\",\"FormItemContainer\":\"Auth_FormItemContainer__N2tVx\",\"FormUserIcon\":\"Auth_FormUserIcon__1A6Db\",\"FormLabel\":\"Auth_FormLabel__2dcbz\",\"FormInput\":\"Auth_FormInput__51YcC\",\"FormButton\":\"Auth_FormButton__1a65I\",\"FormIcon\":\"Auth_FormIcon__19OE5\"};","import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faKey, faEnvelope, faUserCircle } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport Button from \"../../components/UI/Button/Button\";\r\nimport classes from \"./Auth.module.css\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\nimport { updateObject, checkValidity } from \"../../shared/utility\";\r\nimport * as actions from \"../../store/actions/index\";\r\n\r\nconst Auth = (props) => {\r\n   const [authForm, setAuthForm] = useState({\r\n            email: {\r\n                elementType: \"input\",\r\n                elementConfig: {\r\n                  type:\"email\",\r\n                  placeholder: \"Your E-mail\"\r\n                },\r\n                value: \"test@test.com\",\r\n                validation: {\r\n                  required: true,\r\n                  isEmail: true,\r\n                },\r\n                valid: false,\r\n                touched: false,\r\n              },\r\n              password: {\r\n                elementType: \"input\",\r\n                elementConfig: {\r\n                  type:\"password\",\r\n                  placeholder: \"Password\"\r\n                },\r\n                value: \"123456\",\r\n                validation: {\r\n                  required: true,\r\n                  minLength: 6,\r\n                },\r\n                valid: false,\r\n                touched: false,\r\n              },\r\n        },\r\n    );\r\n\r\n    const [isSignedUp, setIsSignedUp] = useState(true);\r\n\r\n    const { buildingBurger, authRedirectPath, onSetAuthRedirectPath } = props;\r\n\r\n    useEffect(() => {\r\n      if(!buildingBurger && authRedirectPath){\r\n        onSetAuthRedirectPath();\r\n      }\r\n    }, [buildingBurger, authRedirectPath, onSetAuthRedirectPath]);\r\n\r\n\r\n    const inputChangeHandler = (event, controlName) => {\r\n      const updatedControls = updateObject(authForm, {\r\n        [controlName]: updateObject(authForm[controlName], {\r\n          value:  event.target.value,\r\n          valid: checkValidity(event.target.value, authForm[controlName]),\r\n          touched: true,\r\n        })\r\n      });\r\n      setAuthForm(updatedControls);\r\n    }\r\n\r\n    const submitHandler = (event) => {\r\n      event.preventDefault();\r\n      props.onAuth(authForm.email.value, \r\n                        authForm.password.value,\r\n                        isSignedUp);\r\n    };\r\n\r\n    const switchAuthModeHandler = () => {\r\n      setIsSignedUp(!isSignedUp);\r\n    };\r\n\r\n        const formElementsArray = [];\r\n        for(let key in authForm){\r\n          formElementsArray.push({\r\n            id: key,\r\n            config: authForm[key],\r\n          });\r\n        }\r\n\r\n        let form = formElementsArray.map(formElement => {\r\n          const elementNameFirstLetter = formElement.id.charAt(0).toUpperCase();\r\n          const nameWithoutLetter = formElement.id.slice(1);\r\n          const labelName = `${elementNameFirstLetter}${nameWithoutLetter}`;\r\n          const iconStyle = {\r\n            fontSize: \"16px\",\r\n            color: \"#F2A30F\",\r\n            padding: \"0px 6px\",\r\n          }\r\n          return (\r\n            <div className={classes.FormItemContainer}>\r\n              <p className={classes.FormLabel}>\r\n                {labelName === \"Email\" ? \r\n                    <FontAwesomeIcon icon={faEnvelope} style={iconStyle}/> :\r\n                    <FontAwesomeIcon icon={faKey} style={iconStyle}/>\r\n                }\r\n                {labelName}\r\n              </p>\r\n              <Input \r\n                className={classes.FormInput}\r\n                key={formElement.id}\r\n                elementType={formElement.config.elementType}\r\n                elementConfig={formElement.config.elementConfig}\r\n                value={formElement.config.value} \r\n                invalid={!formElement.config.valid}\r\n                shouldValidate={formElement.config.validation}\r\n                touched={formElement.config.touched}\r\n                changed={(event) => inputChangeHandler(event, formElement.id)} \r\n              />\r\n            </div>\r\n          )\r\n        });\r\n\r\n        if(props.loading){\r\n          form = <Spinner />;\r\n        }\r\n\r\n        let errorMessage = null;\r\n\r\n        if(props.error) {\r\n          errorMessage = (\r\n          <p>{props.error.message}</p>\r\n          );\r\n        }\r\n\r\n        let authRedirect = null;\r\n\r\n        if(props.isAuthenticated){\r\n          authRedirect = <Redirect to={props.authRedirect} />;\r\n        }\r\n\r\n        return (\r\n        <div className={classes.AuthContainer}>\r\n          <div className={classes.Auth}>\r\n            {authRedirect}\r\n            {errorMessage}\r\n            <p className={classes.FormUserIcon}>             \r\n              <FontAwesomeIcon icon={faUserCircle} />\r\n            </p>\r\n            <p className={classes.FormTitle}>Let us know you!</p>\r\n            <form \r\n              className={classes.FormContainer}\r\n              onSubmit={(event) => submitHandler(event)}\r\n            >\r\n              {form} \r\n              <Button \r\n                className={classes.FormButton} \r\n                btnType=\"Success\"\r\n              >\r\n                  SUBMIT\r\n              </Button>\r\n            </form>\r\n            <Button \r\n              className={classes.FormButton} \r\n              btnType=\"Danger\" \r\n              clicked={switchAuthModeHandler}\r\n            >\r\n              SWITCH TO {isSignedUp ? \"SIGN UP\" : \"SIGN IN\" }\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        )\r\n    }\r\n\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    loading: state.auth.loading,\r\n    error: state.auth.error,\r\n    isAuthenticated: state.auth.token !== null,\r\n    token: state.auth.token,\r\n    buildingBurger: state.burgerBuilder.building,\r\n    authRedirect: state.auth.authRedirectPath,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onAuth: (email, password, isSignedUp) => dispatch(actions.auth(email, password, isSignedUp)),\r\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath(\"/\")),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);"],"sourceRoot":""}